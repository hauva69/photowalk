#!/usr/bin/python

'''
FIXME: Write the program documentation.
'''

import photowalk.exifdst
import photowalk.resize
import photowalk.rotate

import Image
import pyexiv2

import ConfigParser
import errno
import getopt
import os
import os.path
import shutil
import sys

def help(prog, args):
    '''Help for each command.'''
    # FIXME: I need more help!
    try:
        cmd = args[1]
    except IndexError:
        print(__doc__)
        sys.exit(0)
    if cmd == 'resize':
        help_resize(prog)
        sys.exit(0)
    elif cmd == 'init':
        help_init(prog)
        sys.exit(0)
    elif cmd == 'cand':
        help_cand(prog)
        sys.exit(0)
    else:
        msg = '%s: %s is an unknown command.\n' % (prog, cmd)
        sys.stderr.write(msg)
        sys.exit(4)

def help_init(prog):
    '''Help for command init.'''
    msg = '%s init' % prog
    print(msg)

def help_resize(prog):
    '''Help for command resize.'''
    msg = '%s resize from_directory to_directory' % prog
    print(msg)

def help_cand(prog):
    '''Help for command resize.'''
    msg = '%s cand from_directory to_directory' % prog
    print(msg)

def init():
    nefdn = 'orig_nef'
    jpgdn = 'orig_jpg'
    try:
        os.mkdir(nefdn)
    except OSError, ex:
        if ex.errno == errno.EEXIST:
            pass
        else:
            raise ex
    try:
        os.mkdir(jpgdn)
    except OSError, ex:
        if ex.errno == errno.EEXIST:
            pass
        else:
            raise ex
    for i in os.listdir('.'):
        fn = i.lower()
        if fn.endswith('.nef'):
            fn = '%s/%s' % (nefdn, fn)
        elif fn.endswith('.jpg'):
            fn = '%s/%s' % (jpgdn, fn)
        shutil.move(i, fn)

def dist(origdn, treedn):
    '''Copies files from origdn to treedn/YYYY/MM/DD.'''
    try:
        photowalk.exifdst.exifdst(origdn, treedn)
    except OSError, ex:
        msg = '%s\n' % str(ex)
        sys.stderr.write(msg)
        sys.exit(2)

def cand(jpgdn, canddn):
    '''Hard links all *.jpg files from jpgdn to canddn.'''
    try:
        os.mkdir(canddn)
    except OSError, ex:
        if ex.errno == errno.EEXIST:
            pass
        else:
            raise ex
    for i in os.listdir(jpgdn):
        fn = '%s/%s' % (jpgdn, i)
        tofn = '%s/%s' % (canddn, i)
        if not os.path.exists(tofn):
            os.link(fn, tofn)

def rawcand(canddn, rawdn, todn):
    '''Takes all files from canddn and hard links the corresponding RAW
files from rawdn to todn.'''
    try:
        os.mkdir(todn)
    except OSError, ex:
        if errno.EEXIST == ex.errno:
            pass
        else:
            raise ex
    for i in os.listdir(canddn):
        rawfn = '%s/%s' % (rawdn, i.replace('.jpg', '.nef'))
        tmp = '%s/%s' % (todn, i.replace('.jpg', '.nef'))
        if not os.path.exists(tmp):
            os.link(rawfn, tmp)

def resize(frmdn, todn, size=2048):
    '''frmdn, todn, size -> Image'''
    if not os.path.exists(todn):
        os.mkdir(todn)
    for i in os.listdir(frmdn):
        frm = '%s/%s' % (frmdn, i)
        to = '%s/%s' % (todn, i)
        try:
            im = Image.open(frm)
        except IOError, ex:
            if errno.EISDIR == ex.errno:
                continue
            else:
                raise ex
        im = photowalk.rotate.rotate(im, frm)
        im = photowalk.resize.scale(im, size)
        im.save(to)
        mdfrm = pyexiv2.ImageMetadata(frm)
        mdfrm.read()
        mdto = pyexiv2.ImageMetadata(to)
        mdto.read()
        pyexiv2.ImageMetadata.copy(mdfrm, mdto)
        mdto['Exif.Image.Orientation']= 1
        w, h = im.size
        mdto['Exif.Photo.PixelXDimension'].value = w
        mdto['Exif.Photo.PixelYDimension'].value = h
        mdto.write()

def main():
    global config, logger

    prog = sys.argv[0]
    try:
        conffn = '%s/etc/photowalkrc' % os.environ['PHOTOWALK_HOME']
    except KeyError:
        msg = '%s: environment variable PHOTOWALK_HOME not defined.\n' % prog
        sys.stderr.write(msg)
        sys.exit(5)
    if not os.path.exists(conffn):
        msg = '%s: configuration file %s does not exist.\n' % (prog, conffn)
        sys.stderr.write(msg)
        sys.exit(6)
    config = ConfigParser.SafeConfigParser()
    config.read(conffn)

    try:
        opts, args = getopt.getopt(sys.argv[1:], '-n')
    except getopt.GetoptError:
        help()
        sys.exit(3)
    try:
        cmd = args[0]
    except IndexError:
        help()
        sys.exit(1)
    if cmd == 'init':
        init()
    elif cmd == 'cand':
        cand(args[1], args[2])
    elif cmd == 'rawcand':
        rawcand(args[1], args[2], args[3])
    elif cmd == 'dist':
        dist(args[1], args[2])
    elif cmd == 'resize':
        frmdn = args[1]
        todn = args[2]
        resize(frmdn, todn)
    elif cmd == 'import':
        # FIXME
        pass
    elif cmd == 'help':
        help(prog, args)

if __name__ == '__main__':
    main()

